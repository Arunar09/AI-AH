# Kubernetes MinIO Storage Configuration
# This manifest creates MinIO storage classes and persistent volumes for agent training

apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-config
  namespace: default
data:
  MINIO_ENDPOINT: "http://minio:9000"
  MINIO_ACCESS_KEY: "minioadmin"
  MINIO_SECRET_KEY: "minioadmin123"
  MINIO_BUCKET_PREFIX: "k8s-"

---
apiVersion: v1
kind: Secret
metadata:
  name: minio-credentials
  namespace: default
type: Opaque
data:
  access-key: bWluaW9hZG1pbg==  # minioadmin (base64)
  secret-key: bWluaW9hZG1pbjEyMw==  # minioadmin123 (base64)

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: minio-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
parameters:
  type: minio

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: minio-pv
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: minio-storage
  hostPath:
    path: /data/minio

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: minio-storage

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio-client
  labels:
    app: minio-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio-client
  template:
    metadata:
      labels:
        app: minio-client
    spec:
      containers:
      - name: minio-client
        image: minio/mc:latest
        command: ["/bin/sh"]
        args:
          - -c
          - |
            # Install MinIO client
            wget -O /usr/local/bin/mc https://dl.min.io/client/mc/release/linux-amd64/mc
            chmod +x /usr/local/bin/mc
            
            # Configure MinIO alias
            /usr/local/bin/mc alias set local $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
            
            # Create buckets for Kubernetes
            /usr/local/bin/mc mb local/k8s-backups --ignore-existing
            /usr/local/bin/mc mb local/k8s-logs --ignore-existing
            /usr/local/bin/mc mb local/k8s-configs --ignore-existing
            
            # Keep container running
            tail -f /dev/null
        env:
        - name: MINIO_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: minio-config
              key: MINIO_ENDPOINT
        - name: MINIO_ACCESS_KEY
          valueFrom:
            configMapKeyRef:
              name: minio-config
              key: MINIO_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            configMapKeyRef:
              name: minio-config
              key: MINIO_SECRET_KEY
        volumeMounts:
        - name: minio-storage
          mountPath: /data
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: minio-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: minio-client-service
spec:
  selector:
    app: minio-client
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# CronJob for automated backups to MinIO
apiVersion: batch/v1
kind: CronJob
metadata:
  name: k8s-backup-to-minio
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: minio/mc:latest
            command:
            - /bin/sh
            - -c
            - |
              # Install MinIO client
              wget -O /usr/local/bin/mc https://dl.min.io/client/mc/release/linux-amd64/mc
              chmod +x /usr/local/bin/mc
              
              # Configure MinIO alias
              /usr/local/bin/mc alias set local $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
              
              # Backup Kubernetes resources
              kubectl get all --all-namespaces -o yaml > /tmp/k8s-backup.yaml
              /usr/local/bin/mc cp /tmp/k8s-backup.yaml local/k8s-backups/k8s-backup-$(date +%Y%m%d-%H%M%S).yaml
              
              # Cleanup old backups (keep last 7 days)
              /usr/local/bin/mc rm --recursive --force local/k8s-backups/ --older-than 7d
            env:
            - name: MINIO_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: minio-config
                  key: MINIO_ENDPOINT
            - name: MINIO_ACCESS_KEY
              valueFrom:
                configMapKeyRef:
                  name: minio-config
                  key: MINIO_ACCESS_KEY
            - name: MINIO_SECRET_KEY
              valueFrom:
                configMapKeyRef:
                  name: minio-config
                  key: MINIO_SECRET_KEY
          restartPolicy: OnFailure
